/*! * Bootstrap v3.3.2 (http://getbootstrap.com) * Copyright 2011-2015 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) *//*! * Generated using the Bootstrap Customizer (http://getbootstrap.com/customize/?id=9980c2379b76bb6cbd79) * Config saved to config.json and https://gist.github.com/9980c2379b76bb6cbd79 */if (typeof jQuery === 'undefined') {  throw new Error('Bootstrap\'s JavaScript requires jQuery')}+function ($) {  'use strict';  var version = $.fn.jquery.split(' ')[0].split('.')  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1)) {    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher')  }}(jQuery);/* ======================================================================== * Bootstrap: dropdown.js v3.3.2 * http://getbootstrap.com/javascript/#dropdowns * ======================================================================== * Copyright 2011-2015 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) * ======================================================================== */+function ($) {  'use strict';  // DROPDOWN CLASS DEFINITION  // =========================  var backdrop = '.dropdown-backdrop'  var toggle   = '[data-toggle="dropdown"]'  var Dropdown = function (element) {    $(element).on('click.bs.dropdown', this.toggle)  }  Dropdown.VERSION = '3.3.2'  Dropdown.prototype.toggle = function (e) {    var $this = $(this)    if ($this.is('.disabled, :disabled')) return    var $parent  = getParent($this)    var isActive = $parent.hasClass('open')    clearMenus()    if (!isActive) {      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {        // if mobile we use a backdrop because click events don't delegate        $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus)      }      var relatedTarget = { relatedTarget: this }      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))      if (e.isDefaultPrevented()) return      $this        .trigger('focus')        .attr('aria-expanded', 'true')      $parent        .toggleClass('open')        .trigger('shown.bs.dropdown', relatedTarget)    }    return false  }  Dropdown.prototype.keydown = function (e) {    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return    var $this = $(this)    e.preventDefault()    e.stopPropagation()    if ($this.is('.disabled, :disabled')) return    var $parent  = getParent($this)    var isActive = $parent.hasClass('open')    if ((!isActive && e.which != 27) || (isActive && e.which == 27)) {      if (e.which == 27) $parent.find(toggle).trigger('focus')      return $this.trigger('click')    }    var desc = ' li:not(.divider):visible a'    var $items = $parent.find('[role="menu"]' + desc + ', [role="listbox"]' + desc)    if (!$items.length) return    var index = $items.index(e.target)    if (e.which == 38 && index > 0)                 index--                        // up    if (e.which == 40 && index < $items.length - 1) index++                        // down    if (!~index)                                      index = 0    $items.eq(index).trigger('focus')  }  function clearMenus(e) {    if (e && e.which === 3) return    $(backdrop).remove()    $(toggle).each(function () {      var $this         = $(this)      var $parent       = getParent($this)      var relatedTarget = { relatedTarget: this }      if (!$parent.hasClass('open')) return      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))      if (e.isDefaultPrevented()) return      $this.attr('aria-expanded', 'false')      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)    })  }  function getParent($this) {    var selector = $this.attr('data-target')    if (!selector) {      selector = $this.attr('href')      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7    }    var $parent = selector && $(selector)    return $parent && $parent.length ? $parent : $this.parent()  }  // DROPDOWN PLUGIN DEFINITION  // ==========================  function Plugin(option) {    return this.each(function () {      var $this = $(this)      var data  = $this.data('bs.dropdown')      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))      if (typeof option == 'string') data[option].call($this)    })  }  var old = $.fn.dropdown  $.fn.dropdown             = Plugin  $.fn.dropdown.Constructor = Dropdown  // DROPDOWN NO CONFLICT  // ====================  $.fn.dropdown.noConflict = function () {    $.fn.dropdown = old    return this  }  // APPLY TO STANDARD DROPDOWN ELEMENTS  // ===================================  $(document)    .on('click.bs.dropdown.data-api', clearMenus)    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)    .on('keydown.bs.dropdown.data-api', '[role="menu"]', Dropdown.prototype.keydown)    .on('keydown.bs.dropdown.data-api', '[role="listbox"]', Dropdown.prototype.keydown)}(jQuery);/* ======================================================================== * Bootstrap: transition.js v3.3.2 * http://getbootstrap.com/javascript/#transitions * ======================================================================== * Copyright 2011-2015 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) * ======================================================================== */+function ($) {  'use strict';  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)  // ============================================================  function transitionEnd() {    var el = document.createElement('bootstrap')    var transEndEventNames = {      WebkitTransition : 'webkitTransitionEnd',      MozTransition    : 'transitionend',      OTransition      : 'oTransitionEnd otransitionend',      transition       : 'transitionend'    }    for (var name in transEndEventNames) {      if (el.style[name] !== undefined) {        return { end: transEndEventNames[name] }      }    }    return false // explicit for ie8 (  ._.)  }  // http://blog.alexmaccaw.com/css-transitions  $.fn.emulateTransitionEnd = function (duration) {    var called = false    var $el = this    $(this).one('bsTransitionEnd', function () { called = true })    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }    setTimeout(callback, duration)    return this  }  $(function () {    $.support.transition = transitionEnd()    if (!$.support.transition) return    $.event.special.bsTransitionEnd = {      bindType: $.support.transition.end,      delegateType: $.support.transition.end,      handle: function (e) {        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)      }    }  })}(jQuery);/** scotchPanels - v1.0.3 - 2014-09-25* https://github.com/scotch-io/scotch-panels* Copyright (c) 2014 Nicholas Cerminara <nick@scotch.io>*/// Start with Semicolon to block;(function($) {    // Enable Strict Mode    'use strict';    // Create Panels Array    var panels = [];    // Has done CSS3 browser support check?    var browserSupportTest = false;    var has3d = false;    var hasTransitions = false;    // Plugin Default Settings    var defaults = {        // General Config        containerSelector: 'body',        type: 'html', // html, iframe, video, image        // Styles        direction: 'top', // top, left, right, bottom        duration: 300, // ms        transition: 'ease', // linear, ease, ease-in, ease-out, ease-in-out, cubic-bezier(P1x,P1y,P2x,P2y)        // Browser Support        easingPluginTransition: 'easeInCirc',        useCSS: true,   // Consider not using if have Fixed Elements        useEasingPlugin: false, // http://gsgd.co.uk/sandbox/jquery/easing/ only for browser support        // Image Options        imageURL: false,        // Iframe Options        iframeURL: false,        // Video Options        autoPlayVideo: true,        youtubeID: false,        youTubeTheme: 'light',        // TranslateX Options        distanceX: '70%',        // TranslateY Options        forceMinHeight: false,        minHeight: '200px',        // Triggers        closeAfter: 0, // ms        startOpened: false,        startOpenedDelay: 0, // ms        // Event Helpers        clickSelector: false,        enableEscapeKey: true,        hoverSelector: false,        touchSelector: false,        // Callbacks        beforePanelOpen: function() {},        afterPanelOpen: function() {},        beforePanelClose: function() {},        afterPanelClose: function() {}    };    $.fn.scotchPanel = function(options) {        // Check to see if Default Options are Set        if (typeof options === 'undefined') {            options = {};        }        // Check to see if an element is even selected        if (this.length === 0) return this;        // Support selecting Panels        if (this.length > 1) {            // Loop through all selected scotch panels            this.each(function() {                // Add panel to array                panels.push($(this).scotchPanel(options));            });            // Public Functions Functionality for all at once            panels.open = function() {                for (var i = 0; i < panels.length; i++) {                    panels[i].open();                }            };            panels.close = function() {                for (var i = 0; i < panels.length; i++) {                    panels[i].close();                }            };            panels.toggle = function() {                for (var i = 0; i < panels.length; i++) {                    panels[i].toggle();                }            };            // Return the Scotch Panels            return panels;        }        // Create Current Scotch Panel Object        var panel = {};        panel = this;        /*=========================================        =            PRIVATE FUNCTIONS            =        =========================================*/        // Prep everything        var init = function() {            // Do CSS3 Check!            if (!browserSupportTest) {                browserSupportTest = true;                has3d = browserSupport.transition();                hasTransitions = browserSupport.translate3d();            }            // Check for HTML5 data attributes instead            for (var key in defaults) {                if (defaults.hasOwnProperty(key)) {                    if (panel.attr('data-'+key.toLowerCase())) {                        options[key] = panel.data(key.toLowerCase());                    }                }            }            // Merge Custom Plugin Settings with Default            panel.settings = $.extend({}, defaults, options);            // Start DOM and CSS Modifications            setup();        };        // DOM / CSS Changes / Make Things Happen        var setup = function() {            // Wrap the panel!            var container = $(panel.settings.containerSelector);            if (!container.hasClass('scotchified')) {                container.wrapInner('<div class="scotch-panel-wrapper"><div class="scotch-panel-canvas"></div></div>').addClass('scotchified');            }            // Scotch Panel Wrapper CSS            $('.scotch-panel-wrapper').css({                'position': 'relative',                'overflow': 'hidden',                'width': '100%'            });            // Scotch Panel Canvas CSS            $('.scotch-panel-canvas').css({                'position': 'relative',                'height': '100%',                'width': '100%'            });            // Do 3D Stuff separate            if (panel.settings.useCSS) {                $('.scotch-panel-canvas').css({                    '-moz-transform': 'translate3d(0, 0, 0)',                    '-ms-transform': 'translate3d(0, 0, 0)',                    '-o-transform': 'translate3d(0, 0, 0)',                    '-webkit-transform': 'translate3d(0, 0, 0)',                    'transform': 'translate3d(0, 0, 0)',                    '-moz-backface-visibility': 'hidden',                    '-ms-backface-visibility': 'hidden',                    '-o-backface-visibility': 'hidden',                    '-webkit-backface-visibility': 'hidden',                    'backface-visibility': 'hidden'                });            }            // Figure out which off canvas style is used (left, top, right)            if (panel.settings.direction == 'top') {                panel.height = panel.height();                panel.addClass('scotch-panel-top');                panel.css({                    'bottom': '100%',                    'left': '0',                    'width': '100%',                    'position': 'absolute',                    'z-index': '888888',                    'overflow': 'hidden'                });            }            if (panel.settings.direction == 'bottom') {                panel.height = panel.height();                panel.addClass('scotch-panel-bottom');                panel.css({                    'top': '100%',                    'left': '0',                    'width': '100%',                    'position': 'absolute',                    'z-index': '888888',                    'overflow': 'hidden'                });            }            if (panel.settings.direction == 'left') {                panel.addClass('scotch-panel-left');                panel.css({                    'top': '0',                    'left': '-' + panel.settings.distanceX,                    'width': panel.settings.distanceX,                    'height': '100%',                    'position': 'absolute',                    'z-index': '888888',                    'overflow': 'hidden'                });            }            if (panel.settings.direction == 'right') {                panel.addClass('scotch-panel-right');                panel.css({                    'top': '0',                    'right': '-' + panel.settings.distanceX,                    'width': panel.settings.distanceX,                    'height': '100%',                    'position': 'absolute',                    'z-index': '888888',                    'overflow': 'hidden'                });            }            panel.css({                '-moz-backface-visibility': 'hidden',                '-ms-backface-visibility': 'hidden',                '-o-backface-visibility': 'hidden',                '-webkit-backface-visibility': 'hidden',                'backface-visibility': 'hidden'            });            // Photo Logic            if (panel.settings.type == 'image' && panel.settings.imageURL) {                panel.css({                    '-o-background-size': 'cover',                    '-ms-background-size': 'cover',                    '-moz-background-size': 'cover',                    '-webkit-background-size': 'cover',                    'background-size': 'cover',                    'background-position': '50% 0',                    'background-repeat': 'no-repeat',                    'background-image': 'url('+panel.settings.imageURL+')'                });                // Update Panel Height if top or bottom                if (panel.settings.direction == 'top' || panel.settings.direction == 'bottom') {                    panel.css('min-height', panel.settings.minHeight);                    panel.height = $(panel).height();                }            }            // Iframe Logic            if (panel.settings.type == 'iframe' && panel.settings.iframeURL) {                panel.iframeIsLoaded = false;                panel.append('<iframe frameborder="0" style="width: 100%; height: 100%; display: block; position: relative; min-height: '+panel.settings.minHeight+'" allowfullscreen></iframe>');                // Update Panel Height if top or bottom                if (panel.settings.direction == 'top' || panel.settings.direction == 'bottom') {                    panel.height = $(panel).height();                }            }            // YouTube Logic            if (panel.settings.type == 'video' && panel.settings.youtubeID) {                panel.append('<div id="video-id-'+panel.settings.youtubeID+'" style="min-height: '+panel.settings.minHeight+'; display: block !important;"><iframe src="//www.youtube.com/embed/'+panel.settings.youtubeID+'?enablejsapi=1&theme='+panel.settings.youTubeTheme+'" frameborder="0" style="width: 100%; height: 100%; display: block; position: absolute; left: 0; top: 0;" allowfullscreen></iframe></div>');                // Update Panel Height if top or bottom                if (panel.settings.direction == 'top' || panel.settings.direction == 'bottom') {                    panel.height = $(panel).height();                }            }            // Apply CSS3 Transitions if modern browser            if (has3d && hasTransitions) {                applyTransition(panel.settings.transition, panel.settings.duration);            }            // Open on Start?            if (panel.settings.startOpened) {                setTimeout(function(){                    panel.open();                }, panel.settings.startOpenedDelay);            }            // Close after X milliseconds?            if (panel.settings.closeAfter != 0) {                setTimeout(function(){                    panel.close();                }, panel.settings.closeAfter);            }        };        // Browser Support Object        var browserSupport = {            transition: function() {                // IE 7 + 8 Sucks                if (!window.getComputedStyle) {                    return false;                }                var b = document.body || document.documentElement,                    s = b.style,                    p = 'transition';                if (typeof s[p] == 'string') { return true; }                // Tests for vendor specific prop                var v = ['Moz', 'webkit', 'Webkit', 'Khtml', 'O', 'ms'];                p = p.charAt(0).toUpperCase() + p.substr(1);                for (var i=0; i<v.length; i++) {                    if (typeof s[v[i] + p] == 'string') { return true; }                }                return false;            },            translate3d: function() {                // IE 7 + 8 Sucks                if (!window.getComputedStyle) {                    return false;                }                var el, has3d;                el = document.createElement('p');                el.style['transform'] = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)';                el.style['margin'] = '0';                document.body.insertBefore(el, document.body.lastChild);                has3d = window.getComputedStyle(el).getPropertyValue('transform');                if (has3d !== undefined) {                    return has3d !== 'none';                } else {                    return false;                }            }        };        // Toggle YouTube State (Play / Pause)        var toggleVideoState = function(element, state) {            var div = document.getElementById(element);            var iframe = div.getElementsByTagName('iframe')[0].contentWindow;            div.style.display = state == 'hide' ? 'none' : '';            var func = state == 'hide' ? 'pauseVideo' : 'playVideo';            iframe.postMessage('{"event":"command","func":"' + func + '","args":""}','*');            div.style['display'] = 'block';        };        // Apply CSS Transitions        var applyTransition = function(transition, duration) {            panel.parents('.scotch-panel-canvas:first').css({                '-ms-transition': 'all '+duration+'ms '+transition,                '-moz-transition': 'all '+duration+'ms '+transition,                '-o-transition': 'all '+duration+'ms '+transition,                '-webkit-transition': 'all '+duration+'ms '+transition,                'transition': 'all '+duration+'ms '+transition            });        };        // Toggle Translate Y        var translateY = function(distanceY) {            // Auto adapt height if unknown and enabled            if (panel.settings.forceMinHeight) {                panel.parents('.scotch-panel-canvas:first').css('min-height', distanceY);            }            if (has3d && hasTransitions && panel.settings.useCSS) {                // Open/Close Before Callbacks (CSS)                if (panel.parents('.scotch-panel-canvas:first').hasClass('scotch-is-showing')) {                    panel.settings.beforePanelOpen();                } else {                    panel.settings.beforePanelClose();                }                panel.parents('.scotch-panel-canvas:first').css({                    '-ms-transform': 'translate3d(0, '+distanceY+'px, 0)',                    '-moz-transform': 'translate3d(0, '+distanceY+'px, 0)',                    '-o-transform': 'translate3d(0, '+distanceY+'px, 0)',                    '-webkit-transform': 'translate3d(0, '+distanceY+'px, 0)',                    'transform': 'translate3d(0, '+distanceY+'px, 0)'                });                setTimeout(function(){                    // Open/Close After Callbacks (CSS)                    if (panel.parents('.scotch-panel-canvas:first').hasClass('scotch-is-showing')) {                        panel.settings.afterPanelOpen();                    } else {                        panel.settings.afterPanelClose();                    }                }, panel.settings.duration);            } else {                // Open/Close Before Callbacks (JS)                if (panel.parents('.scotch-panel-canvas:first').hasClass('scotch-is-showing')) {                    panel.settings.beforePanelOpen();                } else {                    panel.settings.beforePanelClose();                }                if (panel.settings.useEasingPlugin) {                    panel.parents('.scotch-panel-canvas:first').animate({                        top: distanceY+'px'                    }, {                        duration: panel.settings.duration,                        easing: panel.settings.easingPluginTransition,                        complete: function() {                            // Open/Close After Callbacks (JS EASE)                            if (panel.parents('.scotch-panel-canvas:first').hasClass('scotch-is-showing')) {                                panel.settings.afterPanelOpen();                            } else {                                panel.settings.afterPanelClose();                            }                        }                    });                } else {                    panel.parents('.scotch-panel-canvas:first').animate({                        top: distanceY+'px'                    }, panel.settings.duration, function() {                        // Open/Close After Callbacks (JS NO EASE)                        if (panel.parents('.scotch-panel-canvas:first').hasClass('scotch-is-showing')) {                            panel.settings.afterPanelOpen();                        } else {                            panel.settings.afterPanelClose();                        }                    });                }            }        };        // Toggle Translate X        var translateX = function(distanceX) {            if (has3d && hasTransitions && panel.settings.useCSS) {                // Open/Close Before Callbacks (CSS)                if (panel.parents('.scotch-panel-canvas:first').hasClass('scotch-is-showing')) {                    panel.settings.beforePanelOpen();                } else {                    panel.settings.beforePanelClose();                }                panel.parents('.scotch-panel-canvas:first').css({                    '-ms-transform': 'translate3d('+distanceX+', 0, 0)',                    '-moz-transform': 'translate3d('+distanceX+', 0, 0)',                    '-o-transform': 'translate3d('+distanceX+', 0, 0)',                    '-webkit-transform': 'translate3d('+distanceX+', 0, 0)',                    'transform': 'translate3d('+distanceX+', 0, 0)'                });                setTimeout(function() {                    // Open/Close After Callbacks (CSS)                    if (panel.parents('.scotch-panel-canvas:first').hasClass('scotch-is-showing')) {                        panel.settings.afterPanelOpen();                    } else {                        panel.settings.afterPanelClose();                    }                }, panel.settings.duration);            } else {                // Open/Close Before Callbacks (JS)                if (panel.parents('.scotch-panel-canvas:first').hasClass('scotch-is-showing')) {                    panel.settings.beforePanelOpen();                } else {                    panel.settings.beforePanelClose();                }                if (panel.settings.useEasingPlugin) {                    panel.parents('.scotch-panel-canvas:first').animate({                        left: distanceX                    }, {                        duration: panel.settings.duration,                        easing: panel.settings.easingPluginTransition,                        complete: function() {                            // Open/Close After Callbacks (JS EASE)                            if (panel.parents('.scotch-panel-canvas:first').hasClass('scotch-is-showing')) {                                panel.settings.afterPanelOpen();                            } else {                                panel.settings.afterPanelClose();                            }                        }                    });                } else {                    panel.parents('.scotch-panel-canvas:first').animate({                        left: distanceX                    }, panel.settings.duration, function() {                        // Open/Close After Callbacks (JS NO EASE)                        if (panel.parents('.scotch-panel-canvas:first').hasClass('scotch-is-showing')) {                            panel.settings.afterPanelOpen();                        } else {                            panel.settings.afterPanelClose();                        }                    });                }            }        };        /*========================================        =            PUBLIC FUNCTIONS            =        ========================================*/        // Open the Scotch Panel        panel.open = function() {            panel.parents('.scotch-panel-canvas:first').addClass('scotch-is-showing');            // Load iframe if not loaded            if (panel.settings.type == 'iframe' && panel.settings.iframeURL && !panel.iframeIsLoaded) {                panel.iframeIsLoaded = true;                panel.find('iframe').attr('src', panel.settings.iframeURL);            }            // Play YouTube Video            if (panel.settings.type == 'video' && panel.settings.youtubeID && panel.settings.autoPlayVideo) {                toggleVideoState('video-id-'+panel.settings.youtubeID, '');            }            if (panel.settings.direction == 'top') {                translateY(panel.height);            }            if (panel.settings.direction == 'bottom') {                translateY('-' + panel.height);            }            if (panel.settings.direction == 'left') {                translateX(panel.settings.distanceX);            }            if (panel.settings.direction == 'right') {                translateX('-' + panel.settings.distanceX);            }        };        // Close ScotchPanel        panel.close = function() {            panel.parents('.scotch-panel-canvas:first').removeClass('scotch-is-showing');            // Pause YouTube Video (after close...)            setTimeout(function(){                if (panel.settings.type == 'video' && panel.settings.youtubeID && panel.settings.autoPlayVideo) {                    toggleVideoState('video-id-'+panel.settings.youtubeID, 'hide');                }            }, panel.settings.duration);            if (panel.settings.direction == 'top' || panel.settings.direction == 'bottom') {                translateY(0);            }            if (panel.settings.direction == 'left' || panel.settings.direction == 'right') {                translateX(0);            }        };        // Toggle ScotchPanel        panel.toggle = function() {            if (panel.parents('.scotch-panel-canvas:first').hasClass('scotch-is-showing')) {                panel.close();            } else {                panel.open();            }        };        /*=========================================        =            MAKE MAGIC HAPPEN            =        =========================================*/        init();        /*===============================        =            HELEPRS            =        ===============================*/        // Escape Key to Close        $(document).keyup(function(e) {            if (e.keyCode == 27 && panel.settings.enableEscapeKey) {                panel.close();            }        });        // Hover Helper        if (panel.settings.hoverSelector) {            $(panel.settings.hoverSelector).hover(function () {                panel.open();            },            function () {                panel.close();            });        }        // Click Helper        if (panel.settings.clickSelector) {            $(panel.settings.clickSelector).click(function () {                panel.toggle();                return false;            });        }        // Touch Helper        if (panel.settings.touchSelector) {            $(panel.settings.touchSelector).on('touchstart', function () {                panel.toggle();                return false;            });        }        // Return the Scotch Panel Object so Devs can do cool things with it        return panel;    };}(jQuery));$(function() {  var scotchPanel = $('#slide-menu').scotchPanel({    containerSelector: 'body',    direction: 'left',    duration: 300,    transition: 'ease',    distanceX: '70%',    forceMinHeight: true,    minHeight: '2500px',    enableEscapeKey: true  }).show(); // show to avoid flash of content  $('.toggle-slide').click(function() {    scotchPanel.css('overflow', 'scroll');      scotchPanel.toggle();      return false;  });  $('.overlay').click(function() {    // CLOSE ONLY    scotchPanel.close();  });  $('article pre').addClass('prettyprint linenums');  prettyPrint();      /*!   * jQuery auto created index   * http://www.2cto.com/kf/201504/395937.html   */   ~(function(){    var jquery_h2_list = $('#content h2');    if(jquery_h2_list.length > 0)    {        var content = '<a id="_labelTop"></a>';        content    += '<ul>';        for(var i =0;i<jquery_h2_list.length;i++)        {            var go_to_top = '<div style="text-align: right"><a id="_lab' + i + '"></a></div>';            $(jquery_h2_list[i]).before(go_to_top);            var li_content = '<li><a class="anchor-link" href="javascript:;" data-link="_lab' + i + '">' + $(jquery_h2_list[i]).text() + '</a>';            var jquery_h3_list = $(jquery_h2_list[i]).nextUntil(jquery_h2_list[i+1], "h3");            if(jquery_h3_list.length>0)            {                li_content +='<ul>';            }            for(var j = 0;j < jquery_h3_list.length;j++)            {                var go_to_top2 = '<div style="text-align: right"><a id="_lab2'+ i + j + '"></a></div>';                $(jquery_h3_list[j]).before(go_to_top2);                li_content +='<li><a class="anchor-link" href="javascript:;" data-link="_lab2'+ i + j + '">' + $(jquery_h3_list[j]).text() + '</a></li>';            }            if(jquery_h3_list.length>0)            {                li_content +='</ul>';            }            li_content +='</li>';            content += li_content;        }        content += '</ul>';		$('.sidebar,.slide-docs-nav').append(content);    }      })();      $('.anchor-link').click(function() {	scotchPanel.close();    $('html,body').animate({        scrollTop: $('#' + $(this).attr('data-link')).offset().top    }, 1000);});   $('#main').fadeTo(700,0.0);   document.onreadystatechange = function() {        "complete" == document.readyState && setTimeout(loadMain(), 500);   }      function loadMain(){	   $('#spinner').fadeOut(400);	   $('#main').fadeTo(700,1);   }  });